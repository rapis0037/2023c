#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//상품 정보 구조체체
struct product {
    char name[20];
    int price;
};

// 고객 정보 구조체
struct client {
    charname[20]; // 고객명
    char address[100];  // 주소
    char phone[20]; // 전화번호
};

// 주문 정보 구조체
struct order {
    char p_name[20]; // 상품명
    char cli_name [20]; // 고객 이름
    char date[20]; // 주문 날짜
    int quantity; // 수량
} ;


// 상품 목록을 저장할 파일 이름
const char* PRODUCT_FILE = "products.txt";

//목록
struct product* product_list = NULL;
int num_product = 0;

struct client* client_list = NULL;
int num_client = 0;

struct order* order_list=NULL;
int num_order = 0;

void load_products(); //통합 예정
void save_products(); //통합 예정
void product_add();
void product_del();
void product_mod();
void product_list_print();
void product_manage();

int main() {
    // 파일에서 상품 목록을 읽어옴
    load_products();

    // 상품 관리 메뉴 실행
    product_manage();

    // 프로그램 종료 전 상품 목록을 파일에 저장
    save_products();

    // 동적 메모리 해제
    free(product_list);

    return 0;
}


// 파일에서 상품 목록을 읽어옴
void load_products() {
    FILE* file = fopen(PRODUCT_FILE, "r");
    if (file == NULL) {
        printf("상품 파일을 열 수 없습니다.\n\n");
        return;
    }

    // 파일에서 상품 수를 읽어옴
    fscanf(file, "%d", &num_product);

    // 동적 메모리 할당
    product_list = (struct product*)malloc(sizeof(struct product) * num_product);

    // 상품 정보를 파일에서 읽어옴
    for (int i = 0; i < num_product; i++) {
        fscanf(file, "%s %d", product_list[i].name, &(product_list[i].price));
    }

    fclose(file);
}

// 상품 목록을 파일에 저장
void save_products() {
/*  save 통합 예시
    switch(num){
        
        case 1:
        FILE* file = fopen(PRODUCT_FILE, "w");
        
        // 상품 수를 파일에 씀
        fprintf(file, "%d\n", num_product);

        // 상품 정보를 파일에 씀
        for (int i = 0; i < num_product; i++) {
            fprintf(file, "%s %d\n", product_list[i].name, product_list[i].price);
        }
        break;
        
        case 2:
        FILE* file = fopen(client_FILE, "w");
        break;
        .
        .
        .
        
    } */
    
    FILE* file = fopen(PRODUCT_FILE, "w");
    if (file == NULL) {
        printf("상품 파일을 생성할 수 없습니다.\n\n");
        return;
    }

    // 상품 수를 파일에 씀
    fprintf(file, "%d\n", num_product);

    // 상품 정보를 파일에 씀
    for (int i = 0; i < num_product; i++) {
        fprintf(file, "%s %d\n", product_list[i].name, product_list[i].price);
    }

    fclose(file);
}

// 상품 추가
void product_add() {
    struct product new_product;

    printf("상품 추가\n\n");
    printf("상품명을 입력해주세요: ");
    scanf("%s", new_product.name);

    printf("가격을 입력해주세요: ");
    scanf("%d", &(new_product.price));

    // 상품 목록에 추가
    num_product++;
    product_list = (struct product*)realloc(product_list, sizeof(struct product) * num_product);
    product_list[num_product - 1] = new_product;

    printf("상품이 추가되었습니다.\n\n");

    // 변경된 상품 목록을 파일에 저장
    save_products();
}

//상품 수정
void product_mod(){
    char product_name[20];
    int select, a=0, found = 0;
    
    printf("상품 수정 \n");
    printf("수정할 상품명을 입력해주세요: ");
    scanf("%s", product_name);
    
    for (int i = 0; i < num_product; i++) {
        if (strcmp(product_list[i].name, product_name) == 0) {
            found = 1;
            
            while(a == 0){
                
                printf("1. 상품명\n");
                printf("2. 상품재고\n");
                printf("3. 전부 수정\n");
                printf("수정할 부분을 선택해주세요: \n");
                scanf("%d",&select);
            
                switch(select){
                
                    case 1:
                    printf("상품명을 수정해주세요: ");
                    scanf("%s", product_list[i].name);
                    a = 1;
                    break;
                
                    case 2:
                    printf("상품 재고를 수정해주세요: ");
                    scanf("%d", &(product_list[i].price));
                    a = 1;
                    break;
                
                    case 3:
                    printf("상품명을 수정해주세요: ");
                    scanf("%s", product_list[i].name);
                    printf("상품 재고를 수정해주세요: ");
                    scanf("%d", &(product_list[i].price));
                    a = 1;
                    break;
                    default:
                    printf("메뉴에 없는 번호 입니다. 다시 입력해주세요.\n");
                }
                if(a == 1) break;
            }
            break;
        }
    }
    if (!found) {
        printf("상품을 찾을 수 없습니다.\n\n");
    }
}

// 상품 삭제
void product_del() {
    if (num_product == 0) {
        printf("삭제할 상품이 없습니다.\n\n");
        return;
    }

    printf("상품 삭제\n");
    printf("삭제할 상품명을 입력해주세요: ");
    char product_name[20];
    scanf("%s", product_name);

    int found = 0;
    for (int i = 0; i < num_product; i++) {
        if (strcmp(product_list[i].name, product_name) == 0) {
            found = 1;

            // 삭제할 상품 이후의 상품들을 한 칸씩 앞으로 이동
           
            for (int j = i; j < num_product - 1; j++) {
                product_list[j] = product_list[j + 1];
            }
            num_product--;
            product_list = (struct product*)realloc(product_list, sizeof(struct product) * num_product);
            printf("상품이 삭제되었습니다.\n\n");
            break;
        }
    }

    if (!found) {
        printf("상품을 찾을 수 없습니다.\n\n");
    }

    // 변경된 상품 목록을 파일에 저장
    save_products();
}

// 상품 목록 출력
void product_list_print() {
    printf("상품 목록\n\n");
    printf("----------------------------\n\n");
    for (int i = 0; i < num_product; i++) {
        printf("상품명: %s\n", product_list[i].name);
        printf("가격: %d\n\n", product_list[i].price);
        printf("----------------------------\n\n");
    }
}// 통합

// 상품 관리 메뉴
void product_manage() {
    int choice;

    while (1) {
        printf("1. 상품 추가 메뉴\n");
        printf("2. 상품 수정 메뉴\n");
        printf("3. 상품 삭제 메뉴\n");
        printf("4. 상품 목록 출력\n");
        printf("0. 종료\n");
        printf("메뉴를 선택하세요: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                exit(1);
            case 1:
                product_add();
                break;
            
            case 2:
                product_mod();
                break;
                
            case 3:
                product_del();
                break;
                
            case 4:
                product_list_print();
                break;
            default:
                printf("잘못된 입력입니다. 다시 입력해주세요.\n");
                break;
        }
    }
} //세분화

